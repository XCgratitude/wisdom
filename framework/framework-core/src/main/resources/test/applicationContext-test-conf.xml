<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"  xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd"
       default-lazy-init="true">

    <!-- Activates scanning of @Autowired -->
    <context:annotation-config/>

    <!-- Activates scanning of @Service -->
    <context:component-scan base-package="com.wisdom.**.service"/>
    <!-- transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="common"/>
    </bean>
    <!-- enable transaction demarcation with annotations -->
    <tx:annotation-driven/>

    <context:component-scan base-package="com.wisdom.modules"/>

    <!-- 开启AOP监听 只对当前配置文件有效 -->
    <aop:aspectj-autoproxy expose-proxy="true" />


    <!-- 开启注解事务 只对当前配置文件有效 -->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <!-- jta事务管理 read-only没起作用须要测试-->
    <!-- 应为事务传播特性无效 取消掉read-only方法拦截 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--记账的事务单独开启-->
            <tx:method name="accounting" propagation="REQUIRES_NEW" read-only="false" />
            <tx:method name="order" propagation="REQUIRES_NEW" read-only="false" />
            <tx:method name="proxyPay" propagation="REQUIRES_NEW" read-only="false" />
            <tx:method name="list*" propagation="SUPPORTS" read-only="true"  />
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"  />
            <tx:method name="*" propagation="REQUIRED" read-only="false" rollback-for="com.wisdom.framework.core.exception.BusinessException" />
        </tx:attributes>
    </tx:advice>

    <aop:config expose-proxy="true">
        <!-- 只对业务逻辑层实施事务,并处理基类里面的service -->
        <aop:pointcut id="txPointcut" expression="execution(* com.wisdom..*.service.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>

    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="locations">
            <list>
                <value>classpath:test/jdbc.properties</value>
                <value>classpath:test/rabbitmq-config.properties</value>
            </list>
        </property>
    </bean>

    <bean id="commonFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="common" />
        <property name="configLocation" value="classpath:test/${source_mybatis_confg}" />
        <property name="typeAliasesPackage" value="com.gohighedu.platform.data.domains"/>
    </bean>

    <!--配置数据源 -->
    <bean id="common" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName">
            <value>${source_jdbc_driverClassName}</value>
        </property>
        <property name="url">
            <value>${source_jdbc_url}</value>
        </property>
        <property name="username">
            <value>${source_jdbc_username}</value>
        </property>
        <property name="password">
            <value>${source_jdbc_password}</value>
        </property>
    </bean>

    <bean id="commonTarget" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName">
            <value>${source_jdbc_driverClassName}</value>
        </property>
        <property name="url">
            <value>${source_jdbc_url}</value>
        </property>
        <property name="username">
            <value>${source_jdbc_username}</value>
        </property>
        <property name="password">
            <value>${source_jdbc_password}</value>
        </property>
        <property name="maxActive">
            <value>255</value>
        </property>
        <property name="maxIdle">
            <value>2</value>
        </property>
        <property name="maxWait">
            <value>120000</value>
        </property>
    </bean>
    <!--<jee:jndi-lookup id="common" jndi-name="jdbc/platform"/>-->

    <bean id="springContextUtil" class="com.wisdom.framework.core.context.SpringContextUtil" lazy-init="false"/>


    <bean id="mailEngine" lazy-init="false" class="com.wisdom.framework.core.util.MailEngine">
        <property name="from" value="xxx"/>
    </bean>

    <bean id="mailSender" lazy-init="false" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value=""/>
        <property name="port" value="22"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <!-- Uncomment if you need to authenticate with your SMTP Server -->
        <property name="username" value=""/>
        <property name="password" value=""/>
        <property name="protocol" value=""/>
        <property name="javaMailProperties">
            <value>
                mail.smtp.auth=true
            </value>
        </property>
    </bean>

    <bean id="mailMessage" lazy-init="false" class="org.springframework.mail.SimpleMailMessage" scope="prototype">
        <property name="from" value=""/>
    </bean>

</beans>